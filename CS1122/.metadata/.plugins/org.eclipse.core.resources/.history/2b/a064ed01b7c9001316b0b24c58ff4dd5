package evilHangman;

import java.util.Iterator;

/**
 * This class defines a Trie data structure
 * 
 * @author Spencer Rudnick
 */
public class Trie implements Iterable<String> {
	
	private TrieNode root;
	
	private int nodes;
	
	private int words;

	public Trie() {
		root = new TrieNode(null, '^', false);
		
		nodes = 1;
		
		words = 0;
	}
	
	/**
	 * Returns the root node of the Trie.
	 * 
	 * @return The root node of the Trie
	 */
	public TrieNode root(){
		return root;
	}

	/**
	 * This method adds a word to the Trie
	 * 
	 * @param s
	 *            - word to add to the Trie
	 */
	public void addWord(String s) {
		
		TrieNode curr = root;
		
		for (int i = 0; i < s.length(); i += 1){
			
			if (curr.nodeForLetter(s.charAt(i)) != null){
				if (i == s.length() - 1) curr.nodeForLetter(s.charAt(i)).makeEnd();
				
				curr = curr.nodeForLetter(s.charAt(i));
			}
			
			else{
				curr.addChild(s.charAt(i), i == s.length() - 1);
				
				curr = curr.nodeForLetter(s.charAt(i));
				nodes++;
			}
			
		}
		
		words++;
		
	}

	/**
	 * This method removes a word from the Trie. Nodes in the Trie that no
	 * longer lead to words because of deletion should be pruned from the Trie,
	 * as they are dead weight!
	 * 
	 * @param s
	 *            - word to delete from the Trie
	 */
	public void deleteWord(String s) {
		// TODO
	}

	/**
	 * This method should check the Trie to see if a word is stored in it.
	 * 
	 * @param s
	 *            word you are looking for
	 * @return true if the word is stored in the trie, false otherwise
	 */
	public boolean hasWord(String s) {
		
		for (String word : this) if (s.equals(word)) return true;
		
		return false;
	}

	/**
	 * This method returns the total number of nodes in the trie.
	 * 
	 * @return number of letters in the trie
	 */
	public int nodeCount() {
		return nodes;
	}

	/**
	 * This method returns the total number of unique words in the trie
	 * 
	 * @return number of unique words stored in the trie.
	 */
	public int size() {
		return words;
	}

	/**
	 * This method returns an iterator for the trie, as required by the Iterable
	 * interface.
	 * 
	 * @return and iterator for the trie.
	 */
	public Iterator<String> iterator() {
		return new TrieIterator(this);
	}

	/**
	 * This method removes all entries from the trie using an iterator.
	 */
	public void clear() {
		Iterator<String> iter = iterator();
		while (iter.hasNext()) {
			iter.next();
			iter.remove();
		}
	}
}
